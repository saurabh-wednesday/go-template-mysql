package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"errors"
	"go-template/daos"
	"go-template/gqlmodels"
	"go-template/models"
	"go-template/pkg/utl/cnvrttogql"
	"strconv"
)

// CreateAuthor is the resolver for the createAuthor field.
func (r *mutationResolver) CreateAuthor(ctx context.Context, input gqlmodels.AuthorCreateInput) (*gqlmodels.Author, error) {
	var author models.Author
	if input.FirstName != "" && input.LastName != "" {
		author = models.Author{
			FirstName: input.FirstName,
			LastName:  input.LastName,
		}
		newAuthor, err := daos.CreateAuthor(author, ctx)
		graphAuthor := cnvrttogql.AuthorToGraphqlAuthor(&newAuthor)
		return graphAuthor, err
	}
	return nil, errors.New("invalid input")
}

// UpdateAuthor is the resolver for the updateAuthor field.
func (r *mutationResolver) UpdateAuthor(ctx context.Context, input gqlmodels.AuthorUpdateInput) (*gqlmodels.Author, error) {
	var updatedAuthor models.Author
	authorID, err := strconv.Atoi(input.ID)
	if err != nil {
		return nil, err
	}

	author, err := daos.FetchAuthorByID(authorID, ctx)
	if author != nil {
		if input.FirstName != nil {
			author.FirstName = *input.FirstName

		}
		if input.LastName != nil {
			author.FirstName = *input.FirstName
		}
		updatedAuthor, err = daos.UpdateAuthor(author, ctx)
		if err != nil {
			return nil, err
		}
	}
	graphauthor := cnvrttogql.AuthorToGraphqlAuthor(&updatedAuthor)
	return graphauthor, nil
}

// DeleteAuthor is the resolver for the deleteAuthor field.
func (r *mutationResolver) DeleteAuthor(ctx context.Context, input gqlmodels.AuthorDeleteInput) (*gqlmodels.AuthorDeleteResponse, error) {
	authorID, err := strconv.Atoi(input.ID)
	if err != nil {
		return nil, err
	}
	rowsAffected, err := daos.DeletePostByAuthorID(authorID, ctx)
	if rowsAffected == -1 {
		return nil, err
	}
	rowsAffected, err = daos.DeleteAuthorByID(authorID, ctx)
	if err != nil {
		return nil, err
	}

	return &gqlmodels.AuthorDeleteResponse{
		RowsAffected: rowsAffected,
	}, nil
}
